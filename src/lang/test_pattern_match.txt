add(arg1 int, arg2 int) -> int {
    arg1 + arg2
}

print(output int) {}

main(early_out bool, calc_1_2 bool) -> int {
    # A pattern match is an expression, returning the selected value as the result
    sum = match calc_1_2 {
        true: add(1, 2),
        false add(3, 4),
    }

    # Note: need to check that all match arm expressions return the same type.
    # Function returns are exempt from this rule.

    match sum {
        3: print(sum),
        7: print(sum),
        4 || 5 || 6: print(sum),    # if sum == 4 || sum == 5 || sum == 6
        sum: -> sum,

        # Need to have logic that prevents overlapping match arms
        # 5: -> -1,
    }

    # Match arms cannot compare against any expression, they must be:
        # Literals (only int or bool for now)
        # A variable (aka wildcard match)
        # Constructor (struct decomposition, don't have structs yet)
        # Enum variant (don't have enums yet)
    
    sum
}